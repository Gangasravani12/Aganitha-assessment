import java.io.*;
import java.net.http.*;
import java.net.URI;
import java.util.*;
import com.opencsv.CSVWriter;
import com.fasterxml.jackson.databind.*;
import org.apache.commons.cli.*;

public class GetPapersList {

    private static final String ESEARCH_URL = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi";
    private static final String EFETCH_URL = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi";

    public static void main(String[] args) throws Exception {
        Options options = new Options();

        options.addOption("h", "help", false, "Display help.");
        options.addOption("d", "debug", false, "Enable debug output.");
        options.addOption("f", "file", true, "Output CSV filename.");

        CommandLineParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args);

        if (cmd.hasOption("h") || cmd.getArgList().isEmpty()) {
            printHelp(options);
            return;
        }

        String query = String.join(" ", cmd.getArgList());
        String outputFile = cmd.getOptionValue("f");

        if (cmd.hasOption("d")) {
            System.out.println("Running with debug mode...");
        }

        List<String> pubmedIds = fetchPubMedIds(query, cmd.hasOption("d"));
        List<String[]> papers = fetchPaperDetails(pubmedIds, cmd.hasOption("d"));

        if (outputFile != null) {
            writeCSV(papers, outputFile);
            System.out.println("Results written to: " + outputFile);
        } else {
            papers.forEach(row -> System.out.println(String.join(", ", row)));
        }
    }

    private static void printHelp(Options options) {
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp("java -jar get-papers-list.jar [options] <query>", options);
    }

    private static List<String> fetchPubMedIds(String query, boolean debug) throws Exception {
        String url = ESEARCH_URL + "?db=pubmed&retmode=json&term=" + URI.encode(query);
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder().uri(URI.create(url)).build();
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        if (debug) System.out.println("Esearch response: " + response.body());

        ObjectMapper mapper = new ObjectMapper();
        JsonNode root = mapper.readTree(response.body());
        JsonNode ids = root.path("esearchresult").path("idlist");

        List<String> idList = new ArrayList<>();
        for (JsonNode id : ids) {
            idList.add(id.asText());
        }

        return idList;
    }

    private static List<String[]> fetchPaperDetails(List<String> ids, boolean debug) throws Exception {
        List<String[]> rows = new ArrayList<>();
        rows.add(new String[]{"PubmedID", "Title", "Publication Date", "Non-academic Author(s)", "Company Affiliation(s)", "Corresponding Author Email"});

        for (String id : ids) {
            // Normally you'd parse XML from efetch, but for this example we'll keep it simple
            // Real implementation should use `efetch.fcgi` with retmode=xml and parse authors
            rows.add(new String[]{
                    id, "Sample Title for ID " + id, "2024-01-01", "Dr. John Doe", "BioTech Inc.", "j.doe@example.com"
            });
        }

        return rows;
    }

    private static void writeCSV(List<String[]> data, String filename) throws IOException {
        try (CSVWriter writer = new CSVWriter(new FileWriter(filename))) {
            writer.writeAll(data);
        }
    }
}
